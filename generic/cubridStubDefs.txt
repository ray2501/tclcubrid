# cubridStubDefs.txt --
#
#	Definitions of routines in the CUBRID libraries that will be
#	resolved and imported at run time.
#
#-----------------------------------------------------------------------------

* STUBSTRUCT: cubridStubs
* LIBRARY: libcascci cascci

int cci_connect_with_url_ex (char *url, char *user, char *pass, T_CCI_ERROR * err_buf);
int cci_disconnect(int conn_handle, T_CCI_ERROR *err_buf);
int cci_get_db_version (int con_handle, char *out_buf, int buf_size);
CCI_AUTOCOMMIT_MODE cci_get_autocommit(int conn_handle);
int cci_set_autocommit(int conn_handle, CCI_AUTOCOMMIT_MODE  autocommit_mode);
int cci_get_db_parameter (int con_handle, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf);
int cci_set_db_parameter (int con_handle, T_CCI_DB_PARAM param_name, void *value, T_CCI_ERROR * err_buf);
int cci_end_tran(int conn_handle, char type, T_CCI_ERROR *err_buf);
int cci_get_last_insert_id (int con_h_id, void *value, T_CCI_ERROR * err_buf);
int cci_prepare(int conn_handle, char *sql_stmt, char flag, T_CCI_ERROR *err_buf);
int cci_row_count(int conn_handle, int *row_count, T_CCI_ERROR * err_buf);
int cci_clob_new(int conn_handle, T_CCI_CLOB* clob, T_CCI_ERROR* error_buf);
int cci_clob_read(int conn_handle, T_CCI_CLOB clob, long start_pos, int length, char *buf, T_CCI_ERROR* error_buf);
int cci_clob_write(int conn_handle, T_CCI_CLOB clob, long start_pos, int length, const char *buf, T_CCI_ERROR* error_buf);
int cci_clob_free(T_CCI_CLOB clob);
int cci_blob_new(int conn_handle, T_CCI_BLOB* blob, T_CCI_ERROR* error_buf);
int cci_blob_read(int conn_handle, T_CCI_BLOB blob, long start_pos, int length, char *buf, T_CCI_ERROR* error_buf);
int cci_blob_write(int conn_handle, T_CCI_BLOB blob, long start_pos, int length, const char *buf, T_CCI_ERROR* error_buf);
int cci_blob_free(T_CCI_BLOB blob);
int cci_bind_param(int req_handle, int index, T_CCI_A_TYPE a_type, void *value, T_CCI_U_TYPE u_type, char flag);
int cci_execute(int req_handle, char flag, int max_col_size, T_CCI_ERROR *err_buf);
int cci_cursor(int req_handle, int offset, T_CCI_CURSOR_POS origin, T_CCI_ERROR *err_buf);
int cci_fetch(int req_handle, T_CCI_ERROR *err_buf);
int cci_get_data(int req_handle, int col_no, int type, void *value, int *indicator);
T_CCI_COL_INFO* cci_get_result_info(int req_handle, T_CCI_CUBRID_STMT *stmt_type, int *num);
int cci_close_req_handle(int req_handle);
int cci_set_make (T_CCI_SET * set, T_CCI_U_TYPE u_type, int size, void *value, int *indicator);
int cci_set_get (T_CCI_SET set, int index, T_CCI_A_TYPE a_type, void *value, int *indicator);
int cci_set_size (T_CCI_SET set);
void cci_set_free (T_CCI_SET set);

